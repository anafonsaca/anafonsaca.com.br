import json
import boto3
import urllib.parse
import urllib3
import time
import hashlib


def lambda_handler(event, context):
    
    dynamodb = boto3.resource('dynamodb', region_name='us-east-1')
    orderstable = dynamodb.Table('anafonsaca-vendas')
    estoquetable = dynamodb.Table('anafonsaca-estoque') 
    parsedBody = urllib.parse.parse_qs(event['body'])
    
    AccessToken = 'EAADi3vDKwFcBABWvGAIZCmMuqUaIutgJZBerMQd8NPOPZAAErHaLRJUOdgVcSbFKfkWqYwnd395l66DH5nkSjP4N3gGkDbCobozhLAZAWxBIxHOHZBBRsyOF5kbpkOYZBem6ZCQAVLoLkMj4DiUu3wPYKNYaxfYWZBdD2Huvo7KYDuOhSQbilHdlZCfg0hwhsPpQZD'

    ordernumber = parsedBody['order_number'][0]
    
    try:
        nome = parsedBody['customer_name'][0] 
        telefone = parsedBody['customer_phone'][0]
        cpf = parsedBody['customer_identity'][0]
        email = parsedBody['customer_email'][0]
    
        cep = parsedBody['shipping_address_zipcode'][0] 
        bairro = parsedBody['shipping_address_district'][0]
        cidade = parsedBody['shipping_address_city'][0]
        uf = parsedBody['shipping_address_state'][0]
    
        endereco = parsedBody['shipping_address_line1'][0]
        complemento = parsedBody['shipping_address_line2'][0]
        numero = parsedBody['shipping_address_number'][0]
    
        
        value = parsedBody['amount'][0]
    except:
        print("Something went wrong")

    
    pagamento = parsedBody['payment_status'][0]
    
    # atualiza ordem no pago com status de pagamento que recebeu
    orderstable.update_item(
        Key={
            'venda': parsedBody['order_number'][0]
        },
        UpdateExpression='SET paystatus = :val1',
        ExpressionAttributeValues={
            ':val1': pagamento
        }
    )
    
    #envia email texto com as infos mais recentes
    SENDER = "Ana Fonsaca <shop.anafonsaca@gmail.com>"
    RECIPIENT = "shop.anafonsaca@gmail.com"
    SUBJECT = "shop.anafonsaca - info " + str(ordernumber)
    BODY_TEXT = (str(parsedBody))
    CHARSET = "UTF-8"
    client = boto3.client('ses',region_name="us-east-1")

    try:

        response = client.send_email(
            Destination={
                'ToAddresses': [
                    RECIPIENT,
                ],
            },
            Message={
                'Body': {
                    'Text': {
                        'Charset': CHARSET,
                        'Data': BODY_TEXT,
                    },
                },
                'Subject': {
                    'Charset': CHARSET,
                    'Data': SUBJECT,
                },
            },
        Source=SENDER
        )

    except ClientError as e:
        print(e.response['Error']['Message'])


    #pega dados da ordem do banco:
    try:
        response = orderstable.get_item(Key={'venda': ordernumber})
    except ClientError as e:
        print(e.response['Error']['Message'])
    else:
        orderdetail = response['Item']

    try:
        worked=orderdetail['processada']
    except:
        worked="no"

    #testa ja a ordem ja foi processada (estoque e email cliente)

    if (worked == 'no'):
        #puxa itens comprados da ordem e subtrai do estoque:
        for sku in orderdetail['items']:
            tamanho = sku['Description'].lower()
            estoquetable.update_item(
                Key={
                    'sku': sku['Sku']
                },
                UpdateExpression='SET ' + tamanho + ' = ' + tamanho + ' + :val1',
                ExpressionAttributeValues={
                    ':val1': -1
                }
            )

        #puxa todo estoque pra gerar um novo estoque json:    

        response = estoquetable.scan()

        estoque = response['Items']

        while 'LastEvaluatedKey' in response:
            response = estoquetable.scan(ExclusiveStartKey=response['LastEvaluatedKey'])
            estoque.extend(response['Items'])

        novoestoque = {}
        for produto in estoque:
            novoestoque.update({produto['sku']: {'sku': produto['sku'], 'p': int(produto['p']), 'm': int(produto['m']), 'g': int(produto['g']), "u": int(produto['u'])}})

        jsonFilePath = '/tmp/estoque.json'

        with open(jsonFilePath, 'w') as jsonFile:
            jsonFile.write(json.dumps(novoestoque, indent=4))

        #sobe estoque json atualizado pro s3:

        def upload_to_aws(local_file, bucket, s3_file):
            s3 = boto3.client('s3')

            try:
                s3.upload_file(local_file, bucket, s3_file, ExtraArgs={'ACL': 'public-read'})
                print("Upload Successful")
                return True
            except FileNotFoundError:
                print("The file was not found")
                return False
            except NoCredentialsError:
                print("Credentials not available")
                return False

        uploaded = upload_to_aws('/tmp/estoque.json', 'anafonsaca', 'estoque.json')

        # atualiza status de j√° processada na ordem:

        orderstable.update_item(
        Key={
            'venda': ordernumber
        },
        UpdateExpression='SET worked = :val1',
        ExpressionAttributeValues={
            ':val1': 'yes'
        }
    )

    


         #facebook pixel
    
    
        try:
    
            emailhashed = hashlib.sha256(email.encode("utf-8")).hexdigest()

            UserData = {
                "em":emailhashed
            }
            CustomData = {
    
                "order_id":ordernumber,
                "currency":'BRL',
                "value":value,
            }
            Event = {
                "event_name":"Purchase",
                "event_time":int(time.time()),
                "user_data":UserData,
                "custom_data":CustomData,
                "action_source":"website",
        
            }
        
            payload = 'data=[' + json.dumps(Event) + ']' + '&access_token=' + AccessToken

        except:
            print("infoerror")

        

        http = urllib3.PoolManager()
        r = http.request('POST', 'https://graph.facebook.com/v12.0/613123119936316/events',
                    body=payload)
                    
        repostafb = str(json.loads(r.data))
                    
        r2 = http.request('POST', 'https://web.hook.sh/bd3e79f4-efcb-4fb2-8db8-5e84d0580788',
                    body=str(repostafb))
        
        
        
    return {
        'statusCode': 200
    }
